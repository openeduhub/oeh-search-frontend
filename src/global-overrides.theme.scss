@use '@angular/material' as mat;
@import 'additional-colors';

// global overrides
@mixin angular-material-theme-overrides($theme) {
    // overwrite variables
    // badge background-color
    --mat-badge-background-color: #{$pink-default};

    // overwrite border radius for template page
    app-template {
        --mdc-fab-small-container-shape: 4px;
    }

    // overwrite chips default color, background-color + radius for search-field component + suggestion-card dropdown
    app-search-field,
    .suggestion-card {
        // neutral-variant, 30 is equal to on-surface-variant that is used as the chip text color
        // the color should not change in dark mode
        --mdc-chip-label-text-color: #{mat.get-theme-color($theme, neutral-variant, 30)};
        --mdc-chip-with-trailing-icon-trailing-icon-color: #{mat.get-theme-color(
                $theme,
                neutral-variant,
                30
            )};
        --mdc-chip-elevated-container-color: #{$gray-light-alt};
        --mdc-chip-container-shape-radius: 16px;

        // TODO: Replace static colors
        .mat-mdc-chip.chip-group-oer {
            background-color: #{$chip-group-oer};
        }
        .mat-mdc-chip.chip-group-type {
            background-color: #{$chip-group-type};
        }
        .mat-mdc-chip.chip-group-discipline {
            background-color: #{$chip-group-discipline};
        }
        .mat-mdc-chip.chip-group-educationalContext {
            background-color: #{$chip-group-educationalContext};
        }
        .mat-mdc-chip.chip-group-intendedEndUserRole {
            background-color: #{$chip-group-intendedEndUserRole};
        }
        .mat-mdc-chip.chip-group-learningResourceType {
            background-color: #{$chip-group-learningResourceType};
        }
        .mat-mdc-chip.chip-group-source {
            background-color: #{$chip-group-source};
        }
    }

    // overwrite suggestion dropdown background-color
    .suggestion-card {
        @if mat.get-theme-type($theme) == light {
            background-color: mat.get-theme-color($theme, surface);
        } @else {
            background-color: mat.get-theme-color($theme, surface-container);
        }
    }

    // override slick arrow color
    .slick-prev::before,
    .slick-next::before {
        @if mat.get-theme-type($theme) == light {
            color: mat.get-theme-color($theme, neutral, 35);
        } @else {
            color: mat.get-theme-color($theme, neutral, 99);
        }
    }

    // override .grid-border-container background when being dragged
    .cdk-drag .grid-border-container {
        background: mat.get-theme-color($theme, surface);
    }

    // global styles for custom elements
    // custom mat-menu-header-container theme
    .mat-menu-header-container {
        @if mat.get-theme-type($theme) == light {
            color: mat.get-theme-color($theme, neutral, 35);
        } @else {
            color: mat.get-theme-color($theme, neutral, 99);
        }
    }

    // custom button accent theme
    button.btn-accent {
        color: mat.get-theme-color($theme, primary, 40);
        background: $neon-default;

        &:hover {
            background: $neon-medium;
        }
    }

    // custom alert warning theme
    .alert-warning {
        border: 1px solid $accent-warning;
        background: $accent-warning-20;
    }
}

@mixin angular-material-typography-overrides($typography) {
    .mat-mdc-chip {
        @include mat.m2-typography-level($typography, body-2);
    }

    .mat-menu-header-container {
        font-weight: bold;
    }
}
