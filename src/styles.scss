@use '@angular/material' as mat;
@use 'app/wlo-search';
@use 'custom-theme' as custom-theme;

@import './additional-colors';
@import './fonts';
// TODO: Remove, as those are the incorrect styles
$material-icons-font-path: 'material-icons/iconfont/';
@import 'material-icons/iconfont/material-icons';
@import 'ngx-edu-sharing-ui/assets/scss/variables';
@import 'global-overrides.theme';

// Include the common styles for Angular Material
// The core mixin that includes prerequisite styles for common features used by multiple components
@include mat.core();
// TODO: Comment out due to ugly focus indicators on click
//@include mat.strong-focus-indicators();

@mixin apply-theme($theme) {
    // Emit styles for color, typography and density to all components.
    // Alternatives: all-component-colors, all-component-typographies, all-component-densities
    //
    // You might reduce size by only including the styles used in the application,
    // e.g. mat.core-theme and mat.button-theme instead of mat.all-component-theme
    @include mat.all-component-themes($theme);
    //@include mat.strong-focus-indicators-theme($theme);
    // include global material overrides
    @include angular-material-theme-overrides($theme);
    // include search component themes
    @include wlo-search.components-themes($theme);
    @include mat.all-component-typographies($theme);
    @include mat.typography-hierarchy($theme);
    @include wlo-search.components-typographies($theme);
    // system variables: --sys-<pre_typescale_level>-<variation>-<property_token>
    @include mat.system-level-colors($theme);
    @include mat.system-level-typography($theme);
    @include angular-material-typography-overrides($theme);
}

:root {
    $selected-theme: custom-theme.$light-theme;
    @include apply-theme($selected-theme);
    // make CSS variable accessible for further applications
    // valid role names: background, error, error-container, inverse-on-surface, inverse-primary,
    //                   inverse-surface, on-background, on-error, on-error-container, on-primary,
    //                   on-primary-container, on-primary-fixed, on-primary-fixed-variant,
    //                   on-secondary, on-secondary-container, on-secondary-fixed,
    //                   on-secondary-fixed-variant, on-surface, on-surface-variant, on-tertiary,
    //                   on-tertiary-container, on-tertiary-fixed, on-tertiary-fixed-variant,
    //                   outline, outline-variant, primary, primary-container, primary-fixed,
    //                   primary-fixed-dim, scrim, secondary, secondary-container, secondary-fixed,
    //                   secondary-fixed-dim, shadow, surface, surface-bright, surface-container,
    //                   surface-container-high, surface-container-highest, surface-container-low,
    //                   surface-container-lowest, surface-dim, surface-tint, surface-variant,
    //                   tertiary, tertiary-container, tertiary-fixed, tertiary-fixed-dim
    // currently, only selected roles are made available globally
    // in future versions, system variables might replace this: https://material.angular.io/guide/system-variables
    --inverse-surface: #{mat.get-theme-color($selected-theme, inverse-surface)};
    --on-primary: #{mat.get-theme-color($selected-theme, on-primary)};
    --on-surface: #{mat.get-theme-color($selected-theme, on-surface)};
    --outline: #{mat.get-theme-color($selected-theme, outline-variant)};
    --primary: #{mat.get-theme-color($selected-theme, primary)};
    --primary-container: #{mat.get-theme-color($selected-theme, primary-container)};
    --secondary: #{mat.get-theme-color($selected-theme, secondary)};
    --surface: #{mat.get-theme-color($selected-theme, surface)};
    --surface-container-highest: #{mat.get-theme-color($selected-theme, surface-container-highest)};
    --surface-container-low: #{mat.get-theme-color($selected-theme, surface-container-low)};

    @if mat.get-theme-type($selected-theme) == light {
        --sidebar-button: #{mat.get-theme-color($selected-theme, neutral, 99)};
        --secondary-text: #{mat.get-theme-color($selected-theme, neutral, 35)};
    } @else {
        --sidebar-button: #{mat.get-theme-color($selected-theme, secondary, 25)};
        --secondary-text: #{mat.get-theme-color($selected-theme, neutral, 99)};
    }
}

// TODO: This will enable dark mode, if selected by the system
// for dark mode, we only want to swap the colors and every other style should remain the same
//@media (prefers-color-scheme: dark) {
//    :root {
//        @include mat.all-component-colors(custom-theme.$dark-theme);
//    }
//}

// CUSTOM GLOBAL STYLES
html,
body {
    height: 100%;
}

body {
    margin: 0;
}

// Copied from Edu-Sharing Core-UI
.display-none {
    display: none !important;
}
.opacity-invisible {
    opacity: 0;
}

// global utility classes
.text-center {
    text-align: center;
}

.flex-direction-column {
    flex-direction: column;
}

button,
.mat-mdc-button {
    // global adjustment for button label
    &:not(.c-widget-color-picker) .mdc-button__label {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }
    // overrides for btn-accent
    &.btn-accent {
        padding: 8px 18px;
        border-radius: 50px;
    }
}

// overrides for mat-mdc-menu-content of mat-menu
.mat-mdc-menu-content {
    .mat-menu-header-container {
        padding: 8px 12px 12px 12px;
        text-align: center;
    }
    .mat-mdc-menu-item-text {
        display: flex;
        align-items: center;
    }
}

// further style definitions
.alert-warning {
    padding: 16px;
    font-size: var(--sys-body-large-size);
    text-align: center;
    border-width: 1px;
    border-style: solid;
    border-radius: 4px;
}

// grid classes
.wlo-grid {
    display: grid;
    place-items: center;
    overflow: hidden;

    // grid column definition
    &.wlo-grid-cols-6 {
        grid-template-columns: repeat(6, minmax(0, 1fr));
    }

    // col span definition
    .wlo-col-span-2 {
        grid-column: span 2 / span 2;
    }

    .wlo-col-span-3 {
        grid-column: span 3 / span 3;
    }

    .wlo-col-span-4 {
        grid-column: span 4 / span 4;
    }

    .wlo-col-span-6 {
        grid-column: span 6 / span 6;
    }

    &.wlo-gap {
        gap: 0.5rem;
    }

    .wlo-grid-content {
        width: 100%;
        max-width: 100%;
        height: 100%;
        position: relative;

        &.wlo-flex-center {
            display: flex;
            justify-content: center;
            align-items: center;
        }
    }
}

.grid-border-container {
    padding: 16px 24px;
    width: 100%;
    height: 100%;
    border-width: 1px;
    border-style: solid;
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
}

// fix opening mat-dialog moves elements with position: sticky
// related answer: https://stackoverflow.com/a/49067665
html.cdk-global-scrollblock {
    position: static !important;
    overflow-y: hidden !important;
}

:focus-visible {
    outline-offset: 2px;
    outline: currentcolor solid 3px;
}
